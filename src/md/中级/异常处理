#####异常定义：导致程序的正常流程被中断的事件，叫做异常
1. 文件不存在异常
```java
public class TestException {
  
    public static void main(String[] args) {
          
        File f= new File("d:/LOL.exe");
          
        //试图打开文件LOL.exe，会抛出FileNotFoundException，如果不处理该异常，就会有编译错误
        new FileInputStream(f);
          
    }
}
```
#####异常处理。异常处理常见手段： try catch finally throws
1. try catch
```java
public class TestException {
// 1.将可能抛出FileNotFoundException 文件不存在异常的代码放在try里
// 2.如果文件存在，就会顺序往下执行，并且不执行catch块中的代码
// 3. 如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中
// 4. e.printStackTrace(); 会打印出方法的调用痕迹，如此例，会打印出异常开始于TestException的第16行，这样就便于定位和分析到底哪里出了异常
    public static void main(String[] args) {
         
        File f= new File("d:/LOL.exe");
         
        try{
            System.out.println("试图打开 d:/LOL.exe");
            new FileInputStream(f);
            System.out.println("成功打开");
        }
        catch(FileNotFoundException e){
            System.out.println("d:/LOL.exe不存在");
            e.printStackTrace();
        }
         
    }
}
```
2. 使用异常的父类进行catch
```java
public class TestException {
//  FileNotFoundException是Exception的子类，使用Exception也可以catch住FileNotFoundException
    public static void main(String[] args) {
          
        File f= new File("d:/LOL.exe");
          
        try{
            System.out.println("试图打开 d:/LOL.exe");
            new FileInputStream(f);
            System.out.println("成功打开");
        }
         
        catch(Exception e){
            System.out.println("d:/LOL.exe不存在");
            e.printStackTrace();
        }
          
    }
}
```
3. 多异常捕获方法-逐个捕获
```java
public class TestException {
 
    public static void main(String[] args) {
 
        File f = new File("d:/LOL.exe");
 
        try {
            System.out.println("试图打开 d:/LOL.exe");
            new FileInputStream(f);
            System.out.println("成功打开");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date d = sdf.parse("2016-06-03");
        } catch (FileNotFoundException e) {
            System.out.println("d:/LOL.exe不存在");
            e.printStackTrace();
        } catch (ParseException e) {
            System.out.println("日期格式解析错误");
            e.printStackTrace();
        }
    }
}
```
4. 多异常捕获方法-统一捕获
```java
public class TestException {
 
    public static void main(String[] args) {
 
        File f = new File("d:/LOL.exe");
 
        try {
            System.out.println("试图打开 d:/LOL.exe");
            new FileInputStream(f);
            System.out.println("成功打开");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date d = sdf.parse("2016-06-03");
        } catch (FileNotFoundException | ParseException e) {
            if (e instanceof FileNotFoundException)
                System.out.println("d:/LOL.exe不存在");
            if (e instanceof ParseException)
                System.out.println("日期格式解析错误");
 
            e.printStackTrace();
        }
 
    }
}
```
5. finally-无论是否出现异常，finally中的代码都会被执行
```java
public class TestException {
 
    public static void main(String[] args) {
         
        File f= new File("d:/LOL.exe");
         
        try{
            System.out.println("试图打开 d:/LOL.exe");
            new FileInputStream(f);
            System.out.println("成功打开");
        }
        catch(FileNotFoundException e){
            System.out.println("d:/LOL.exe不存在");
            e.printStackTrace();
        }
        finally{
            System.out.println("无论文件是否存在， 都会执行的代码");
        }
    }
}
```
6. throws
```java
public class TestException {
// 考虑如下情况：
// 主方法调用method1
// method1调用method2
// method2中打开文件
// method2中需要进行异常处理
// 但是method2不打算处理，而是把这个异常通过throws抛出去
// 那么method1就会接到该异常。 处理办法也是两种，要么是try catch处理掉，要么也是抛出去。
// method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了
    public static void main(String[] args) {
        method1();
 
    }
 
    private static void method1() {
        try {
            method2();
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
 
    }
 
    private static void method2() throws FileNotFoundException {
 
        File f = new File("d:/LOL.exe");
 
        System.out.println("试图打开 d:/LOL.exe");
        new FileInputStream(f);
        System.out.println("成功打开");
 
    }
}
```
7. throw和throws的区别
```$xslt
- throws 出现在方法声明上，而throw通常都出现在方法体内。
- throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象
```
8. return返回数值
```java
public class Test {

//返回的是finally后的值
	public static void main(String[] args) {
		int a = getInt();
		System.out.println(a);
	}

	private static int getInt() {
		try {
			return 1;
		} catch (Exception e) {
			return 2;
		} finally {
			return 3;
		}
	}
}
```
#####异常的分类
1. 可查异常
```java
public class TestException {
//  可查异常： CheckedException
//  可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException
//  如果不处理，编译器，就不让你通过
    public static void main(String[] args) {
          
        File f= new File("d:/LOL.exe");
          
        try{
            System.out.println("试图打开 d:/LOL.exe");
            new FileInputStream(f);
            System.out.println("成功打开");
        }
        catch(FileNotFoundException e){
            System.out.println("d:/LOL.exe不存在");
            e.printStackTrace();
        }
          
    }
}   
```
2. 运行时异常
```java
public class TestException {
//  运行时异常RuntimeException指： 不是必须进行try catch的异常 
//  常见运行时异常: 
//  除数不能为0异常:ArithmeticException 
//  下标越界异常:ArrayIndexOutOfBoundsException 
//  空指针异常:NullPointerException 
//  在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，即便不进行try catch，也不会有编译错误 
//  Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常太过于普遍，如果都需要进行捕捉，代码的可读性就会变得很糟糕。
    public static void main(String[] args) {
         
        //任何除数不能为0:ArithmeticException
        int k = 5/0;
         
        //下标越界异常：ArrayIndexOutOfBoundsException
        int j[] = new int[5];
        j[10] = 10;
         
        //空指针异常：NullPointerException
        String str = null;
        str.length();
   }
}
```
3. 错误
```java
public class TestException {
//  错误Error，指的是系统级别的异常，通常是内存用光了
//  在默认设置下，一般java程序启动的时候，最大可以使用16m的内存
//  如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出OutOfMemoryError
//  与运行时异常一样，错误也是不要求强制捕捉的
    public static void main(String[] args) {
     
        StringBuffer sb =new StringBuffer();
         
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            sb.append('a');
        }
         
    }
 
}
```
#####throwable
```java
public class TestException {
//	Throwable是类，Exception和Error都继承了该类
//    所以在捕捉的时候，也可以使用Throwable进行捕捉
//    如图： 异常分Error和Exception
//    Exception里又分运行时异常和可查异常。
 
    public static void main(String[] args) {
 
        File f = new File("d:/LOL.exe");
 
        try {
            new FileInputStream(f);
            //使用Throwable进行异常捕捉
        } catch (Throwable t) {
            // TODO Auto-generated catch block
            t.printStackTrace();
        }
 
    }
}
```
#####自定义异常
1. 创建自定义异常
```java
class EnemyHeroIsDeadException extends Exception{
//     一个英雄攻击另一个英雄的时候，如果发现另一个英雄已经挂了，就会抛出EnemyHeroIsDeadException
//     创建一个类EnemyHeroIsDeadException，并继承Exception
//     提供两个构造方法
//     1. 无参的构造方法
//     2. 带参的构造方法，并调用父类的对应的构造方法
    public EnemyHeroIsDeadException(){
         
    }
    public EnemyHeroIsDeadException(String msg){
        super(msg);
    }
}
```
2. 抛出自定义异常
```java
package charactor;
  
public class Hero {
	
//	在Hero的attack方法中，当发现敌方英雄的血量为0的时候，抛出该异常
//    1. 创建一个EnemyHeroIsDeadException实例
//    2. 通过throw 抛出该异常
//    3. 当前方法通过 throws 抛出该异常
//    
//    在外部调用attack方法的时候，就需要进行捕捉，并且捕捉的时候，可以通过e.getMessage() 获取当时出错的具体原因
    public String name;
    protected float hp;
 
    public void attackHero(Hero h) throws EnemyHeroIsDeadException{
        if(h.hp == 0){
            throw new EnemyHeroIsDeadException(h.name + " 已经挂了,不需要施放技能" );
        }
    }
 
    public String toString(){
        return name;
    }
     
    class EnemyHeroIsDeadException extends Exception{
         
        public EnemyHeroIsDeadException(){
             
        }
        public EnemyHeroIsDeadException(String msg){
            super(msg);
        }
    }
      
    public static void main(String[] args) {
         
        Hero garen =  new Hero();
        garen.name = "盖伦";
        garen.hp = 616;
 
        Hero teemo =  new Hero();
        teemo.name = "提莫";
        teemo.hp = 0;
         
        try {
            garen.attackHero(teemo);
             
        } catch (EnemyHeroIsDeadException e) {
            // TODO Auto-generated catch block
            System.out.println("异常的具体原因:"+e.getMessage());
            e.printStackTrace();
        }
         
    }
}
```